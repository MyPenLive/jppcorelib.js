// Generated by CoffeeScript 1.3.3

/*
Namespace
*/


(function() {
  var Command, CommandList, CommandState, Err, Event, EventDispatcher, Func, JqueryAjax, JqueryGet, JqueryPost, Listen, Namespace, ParallelList, SerialList, Wait, _NamespaceObject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Namespace = (function() {

    function Namespace(path) {
      if (!Namespace._validatePath(path)) {
        return _printError("Namespace('" + path + "'), '" + path + "' is invalid.");
      }
      return new _NamespaceObject(path);
    }

    /*
    	STATIC PRIVATE MEMBER
    */


    Namespace._spaces = {};

    Namespace._separator = '.';

    Namespace._defaultScope = window;

    Namespace._regSeparator = Namespace._separator.match(/[\[\]\-^$.+*?{}\\]/) !== null ? "\\" + Namespace._separator : Namespace._separator;

    Namespace._regPath = new RegExp("^[0-9a-zA-Z]+(" + Namespace._regSeparator + "[0-9a-zA-Z]+)*$");

    /*
    	STATIC PRIVATE METHOD
    */


    Namespace._getSpace = function(path) {
      return Namespace._spaces[path];
    };

    Namespace._setSpace = function(path) {
      var _base, _ref;
      return (_ref = (_base = Namespace._spaces)[path]) != null ? _ref : _base[path] = {};
    };

    Namespace._existSpace = function(path) {
      return Namespace._spaces[path] != null;
    };

    Namespace._validatePath = function(path) {
      return (path != null) && Namespace._regPath.test(path);
    };

    Namespace._print = function(message) {
      return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(message) : void 0 : void 0;
    };

    Namespace._printError = function(func, message) {
      return Namespace._print("###ERROR### at " + func + " : " + message);
    };

    /*
    	STATIC PUBLIC METHOD
    */


    Namespace.enumerate = function() {
      return Namespace._print(Namespace._spaces);
    };

    return Namespace;

  })();

  /*
  NamespaceObject (Internal)
  */


  _NamespaceObject = (function() {

    function _NamespaceObject(path) {
      this._path = path;
      this._names = this._path.split(Namespace._separator);
      this._space = Namespace._getSpace(this._path);
      this._scope = Namespace._defaultScope;
    }

    /*
    	PUBLIC METHOD
    */


    _NamespaceObject.prototype.register = function(classname, object, ignoreConflict) {
      if (ignoreConflict == null) {
        ignoreConflict = false;
      }
      if (!((classname != null) && (object != null))) {
        Namespace._printError("Namespace('" + this._path + "').register", 'one of arguments is not defined');
        return this;
      }
      this._allocate();
      if (ignoreConflict || !(this._space[classname] != null)) {
        this._space[classname] = object;
        return this;
      }
      Namespace._printError("Namespace('" + this._path + "').register", "'" + classname + "' is already registered.");
      return this;
    };

    _NamespaceObject.prototype["import"] = function(classname) {
      var key, object, _i, _len, _ref;
      if (classname == null) {
        classname = '*';
      }
      this._allocate();
      if (classname === '*') {
        _ref = this._space;
        for (key in _ref) {
          object = _ref[key];
          this._extern(key);
        }
        return this;
      }
      if (classname instanceof Array) {
        for (_i = 0, _len = classname.length; _i < _len; _i++) {
          key = classname[_i];
          this._extern(key);
        }
        return this;
      }
      if (this._space[classname] != null) {
        this._extern(classname);
        return this;
      }
      Namespace._printError("Namespace('" + this._path + "').import", "'" + classname + "' is not defined");
      return this;
    };

    _NamespaceObject.prototype.exist = function() {
      return Namespace._existSpace(this._path);
    };

    _NamespaceObject.prototype.use = function() {
      var key, name, ns, object, _i, _len, _ref, _ref1, _ref2;
      this._allocate();
      ns = this._scope;
      _ref = this._names;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        ns = (_ref1 = ns[name]) != null ? _ref1 : ns[name] = {};
      }
      _ref2 = this._space;
      for (key in _ref2) {
        object = _ref2[key];
        ns[key] = object;
      }
      return this;
    };

    _NamespaceObject.prototype.scope = function(scope) {
      if (scope == null) {
        scope = Namespace._defaultScope;
      }
      this._scope = scope;
      return this;
    };

    _NamespaceObject.prototype.getPath = function() {
      return this._path;
    };

    /*
    	PRIVATE MEMBER
    */


    _NamespaceObject.prototype._allocate = function() {
      var i, n, _results;
      if (Namespace._existSpace(this._path)) {
        return;
      }
      this._space = Namespace._setSpace(this._path);
      n = this._names.length;
      i = 1;
      _results = [];
      while (i < n) {
        Namespace._setSpace(this._names.slice(0, i).join('.'));
        _results.push(++i);
      }
      return _results;
    };

    _NamespaceObject.prototype._extern = function(classname) {
      return this._scope[classname] = this._space[classname];
    };

    return _NamespaceObject;

  })();

  Namespace('jpp.util').register('Namespace', Namespace).use();

  /*
  Error Util
  */


  Err = (function() {

    function Err() {}

    Err.build = function(at, text) {
      if (text == null) {
        text = '';
      }
      return new Error(("Error at " + at) + (text !== '' ? " : " + text : void 0));
    };

    Err["throw"] = function(at, text) {
      if (text == null) {
        text = '';
      }
      throw this.build(at, text);
    };

    return Err;

  })();

  Namespace('jpp.util').register('Err', Err);

  /*
  Event
  	@type
  	@target
  	@data
  */


  Event = (function() {

    Event.COMPLETE = 'complete';

    Event.OPEN = 'open';

    Event.CLOSE = 'close';

    Event.ERROR = 'error';

    Event.CANCEL = 'cancel';

    Event.RESIZE = 'resize';

    Event.INIT = 'init';

    Event.CONNECT = 'connect';

    Event.PROGRESS = 'progress';

    Event.ADDED = 'added';

    Event.REMOVED = 'removed';

    Event.SELECT = 'select';

    Event.FOCUS = 'focus';

    Event.RENDER = 'render';

    function Event(type, target, extra) {
      this.type = type;
      this.target = target;
      this.extra = extra;
    }

    return Event;

  })();

  Namespace('jpp.event').register('Event', Event);

  /*
  AS3 like EventDispatcher
  */


  EventDispatcher = (function() {

    function EventDispatcher(target) {
      if (target == null) {
        target = null;
      }
      this._target = target != null ? target : this;
      this._listeners = {};
    }

    EventDispatcher.prototype.addEventListener = function(type, listener) {
      var l, _base, _i, _len, _ref, _ref1;
      if (typeof listener !== 'function') {
        return this;
      }
      if ((_ref = (_base = this._listeners)[type]) == null) {
        _base[type] = [];
      }
      _ref1 = this._listeners[type];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        l = _ref1[_i];
        if (l === listener) {
          return this;
        }
      }
      this._listeners[type].push(listener);
      return this;
    };

    EventDispatcher.prototype.removeEventListener = function(type, listener) {
      var i, l, _i, _len, _ref;
      if (!this.hasEventListener(type)) {
        return this;
      }
      _ref = this._listeners[type];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        l = _ref[i];
        if (l === listener) {
          this._listeners[type].splice(i, 1);
        }
      }
      if (this._listeners[type].length === 0) {
        delete this._listeners[type];
      }
      return this;
    };

    EventDispatcher.prototype.removeAllEventListeners = function(type) {
      if (type == null) {
        type = '';
      }
      if (type === '') {
        this._listeners = {};
      } else {
        delete this._listeners[type];
      }
      return this;
    };

    EventDispatcher.prototype.hasEventListener = function(type) {
      return this._listeners[type] != null;
    };

    EventDispatcher.prototype.dispatchEvent = function(type, extra) {
      var event, l, _i, _len, _ref;
      if (extra == null) {
        extra = null;
      }
      if (!this.hasEventListener(type)) {
        return this;
      }
      event = new Event(type, this._target, extra);
      _ref = this._listeners[type];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        l.call(this._target, event);
      }
      return this;
    };

    return EventDispatcher;

  })();

  Namespace('jpp.event').register('EventDispatcher', EventDispatcher);

  /*
  CommandState
  */


  CommandState = (function() {

    function CommandState() {}

    CommandState.SLEEPING = 0;

    CommandState.EXECUTING = 1;

    CommandState.INTERRUPTING = 2;

    return CommandState;

  })();

  Namespace('jpp.command').register('CommandState', CommandState);

  /*
  Command
  */


  Command = (function(_super) {

    __extends(Command, _super);

    /*
    	Constructor
    */


    function Command(executeFunction, interruptFunction, destroyFunction) {
      if (executeFunction == null) {
        executeFunction = null;
      }
      if (interruptFunction == null) {
        interruptFunction = null;
      }
      if (destroyFunction == null) {
        destroyFunction = null;
      }
      Command.__super__.constructor.call(this);
      this.setExecuteFunction(executeFunction);
      this.setInterruptFunction(interruptFunction);
      this.setDestroyFunction(destroyFunction);
      this._state = CommandState.SLEEPING;
      this._parent = null;
    }

    /*
    	Method
    */


    Command.prototype.execute = function() {
      if (this._state > CommandState.SLEEPING) {
        Err["throw"]('Command.execute', 'Command is already executing.');
      }
      this._state = CommandState.EXECUTING;
      this.getExecuteFunction().call(this, this);
      return this;
    };

    Command.prototype.interrupt = function() {
      if (this._state < CommandState.EXECUTING) {
        Err["throw"]('Command.interrupt', 'Command is sleeping');
      }
      this._state = CommandState.INTERRUPTING;
      this.getInterruptFunction().call(this, this);
      return this;
    };

    Command.prototype.destroy = function() {
      this._state = CommandState.SLEEPING;
      this.getDestroyFunction().call(this, this);
      this._parent = null;
      this.__executeFunction = null;
      this.__interruptFunction = null;
      this.__destroyFunction = null;
      return this;
    };

    Command.prototype.notifyComplete = function() {
      switch (this._state) {
        case CommandState.SLEEPING:
          return this;
        case CommandState.EXECUTING:
          this.dispatchEvent(Event.COMPLETE);
          this.destroy();
          return this;
        case CommandState.INTERRUPTING:
          this.dispatchEvent(Event.COMPLETE);
          this.destroy();
          return this;
      }
    };

    /*
    	Getter / Setter
    */


    Command.prototype.getExecuteFunction = function() {
      var _ref;
      return (_ref = this.__executeFunction) != null ? _ref : this._executeFunction;
    };

    Command.prototype.setExecuteFunction = function(f) {
      this.__executeFunction = f;
      return this;
    };

    Command.prototype.getInterruptFunction = function() {
      var _ref;
      return (_ref = this.__interruptFunction) != null ? _ref : this._interruptFunction;
    };

    Command.prototype.setInterruptFunction = function(f) {
      this.__interruptFunction = f;
      return this;
    };

    Command.prototype.getDestroyFunction = function() {
      var _ref;
      return (_ref = this.__destroyFunction) != null ? _ref : this._destroyFunction;
    };

    Command.prototype.setDestroyFunction = function(f) {
      this.__destroyFunction = f;
      return this;
    };

    Command.prototype.getState = function() {
      return this._state;
    };

    Command.prototype.getParent = function() {
      return this._parent;
    };

    Command.prototype.setParent = function(parent) {
      return this._parent = parent;
    };

    /*
    	Protected
    */


    Command.prototype._executeFunction = function(command) {
      return this.notifyComplete();
    };

    Command.prototype._interruptFunction = function(command) {};

    Command.prototype._destroyFunction = function(command) {};

    return Command;

  })(EventDispatcher);

  Namespace('jpp.command').register('Command', Command);

  /*
  CommandList
  */


  CommandList = (function(_super) {

    __extends(CommandList, _super);

    /*
    	Constructor
    */


    function CommandList() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      CommandList.__super__.constructor.call(this);
      this._commands = [];
      this.addCommand.apply(this, commands);
    }

    /*
    	Method
    */


    CommandList.prototype.addCommand = function() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._setParent.apply(this, commands);
      this._commands = this.getCommands().concat(commands);
      return this;
    };

    CommandList.prototype.insertCommand = function() {
      var commands, index;
      index = arguments[0], commands = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._setParent.apply(this, commands);
      Array.prototype.splice.apply(this.getCommands(), [index, 0].concat(commands));
      return this;
    };

    CommandList.prototype._setParent = function() {
      var c, commands, _i, _len, _results;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = commands.length; _i < _len; _i++) {
        c = commands[_i];
        _results.push(c.setParent(this));
      }
      return _results;
    };

    /*
    	Getter / Setter
    */


    CommandList.prototype.getCommandByIndex = function(index) {
      return this._commands[index];
    };

    CommandList.prototype.getCommands = function() {
      return this._commands;
    };

    CommandList.prototype.getLength = function() {
      return this._commands.length;
    };

    /*
    	Protected
    */


    CommandList.prototype._executeFunction = function(command) {
      return this.notifyComplete();
    };

    CommandList.prototype._interruptFunction = function(command) {};

    CommandList.prototype._destroyFunction = function(command) {
      return this._commands = [];
    };

    return CommandList;

  })(Command);

  Namespace('jpp.command').register('CommandList', CommandList);

  /*
  SerialList
  */


  SerialList = (function(_super) {

    __extends(SerialList, _super);

    /*
    	Constructor
    */


    function SerialList() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._completeHandler = __bind(this._completeHandler, this);

      SerialList.__super__.constructor.apply(this, commands);
      this._currentCommand = null;
      this._position = 0;
    }

    /*
    	Method
    */


    SerialList.prototype.addCommand = function() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      SerialList.__super__.addCommand.apply(this, commands);
      return this;
    };

    SerialList.prototype.insertCommand = function() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      SerialList.__super__.insertCommand.apply(this, [this._position + 1].concat(__slice.call(commands)));
      return this;
    };

    SerialList.prototype._next = function() {
      this._currentCommand = this.getCommandByIndex(this._position);
      this._currentCommand.addEventListener(Event.COMPLETE, this._completeHandler);
      return this._currentCommand.execute();
    };

    SerialList.prototype._completeHandler = function(event) {
      this._currentCommand.removeEventListener(Event.COMPLETE, this._completeHandler);
      this._currentCommand = null;
      if (++this._position >= this.getLength()) {
        return this.notifyComplete();
      } else {
        return this._next();
      }
    };

    /*
    	Getter / Setter
    */


    SerialList.prototype.getPosition = function() {
      return this._position;
    };

    /*
    	Protected
    */


    SerialList.prototype._executeFunction = function(command) {
      this._position = 0;
      return this._next();
    };

    SerialList.prototype._interruptFunction = function(command) {
      var _ref;
      if ((_ref = this._currentCommand) != null) {
        _ref.interrupt();
      }
      this._position = 0;
      return SerialList.__super__._interruptFunction.call(this, command);
    };

    SerialList.prototype._destroyFunction = function(command) {
      if (this._currentCommand != null) {
        this._currentCommand.removeEventListener(Event.COMPLETE, this._completeHandler);
        this._currentCommand.destroy();
      }
      this._currentCommand = null;
      this._position = 0;
      return SerialList.__super__._destroyFunction.call(this, command);
    };

    return SerialList;

  })(CommandList);

  Namespace('jpp.command').register('SerialList', SerialList);

  /*
  ParallelList
  */


  ParallelList = (function(_super) {

    __extends(ParallelList, _super);

    /*
    	Constructor
    */


    function ParallelList() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._completeHandler = __bind(this._completeHandler, this);

      ParallelList.__super__.constructor.apply(this, commands);
      this._completeCount = 0;
    }

    /*
    	Method
    */


    ParallelList.prototype.addCommand = function() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ParallelList.__super__.addCommand.apply(this, commands);
      return this;
    };

    ParallelList.prototype.insertCommand = function() {
      var commands;
      commands = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ParallelList.__super__.insertCommand.apply(this, [this.getLength()].concat(__slice.call(commands)));
      return this;
    };

    ParallelList.prototype._completeHandler = function(event) {
      if (++this._completeCount >= this.getLength()) {
        return this.notifyComplete();
      }
    };

    /*
    	Getter / Setter
    */


    ParallelList.prototype.getCompleteCount = function() {
      return this._completeCount;
    };

    /*
    	Protected
    */


    ParallelList.prototype._executeFunction = function(command) {
      var c, _i, _len, _ref, _results;
      this._completeCount = 0;
      _ref = this.getCommands();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.addEventListener(Event.COMPLETE, this._completeHandler);
        _results.push(c.execute());
      }
      return _results;
    };

    ParallelList.prototype._interruptFunction = function(command) {
      var c, _i, _len, _ref;
      _ref = this.getCommands();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.interrupt();
      }
      return ParallelList.__super__._interruptFunction.call(this, command);
    };

    ParallelList.prototype._destroyFunction = function(command) {
      var c, _i, _len, _ref;
      _ref = this.getCommands();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.removeEventListener(Event.COMPLETE, this._completeHandler);
        c.destroy();
      }
      this._completeCount = 0;
      return ParallelList.__super__._destroyFunction.call(this, command);
    };

    return ParallelList;

  })(CommandList);

  Namespace('jpp.command').register('ParallelList', ParallelList);

  /*
  Func Command
  */


  Func = (function(_super) {

    __extends(Func, _super);

    /*
    	Constructor
    */


    function Func(func, args) {
      if (func == null) {
        func = null;
      }
      if (args == null) {
        args = [];
      }
      Func.__super__.constructor.call(this);
      this._func = func;
      this._args = args;
    }

    /*
    	Method
    */


    /*
    	Getter / Setter
    */


    Func.prototype.getFunction = function() {
      return this._func;
    };

    Func.prototype.setFunction = function(func) {
      this._func = func;
      return this;
    };

    Func.prototype.getArguments = function() {
      return this._args;
    };

    Func.prototype.setArguments = function(args) {
      this._args = args;
      return this;
    };

    /*
    	Protected
    */


    Func.prototype._executeFunction = function(command) {
      if (typeof this._func === "function") {
        this._func.apply(this, this._args);
      }
      return this.notifyComplete();
    };

    Func.prototype._interruptFunction = function(command) {};

    Func.prototype._destroyFunction = function(command) {
      this._func = null;
      return this._args = null;
    };

    return Func;

  })(Command);

  Namespace('jpp.command').register('Func', Func);

  /*
  Wait Command
  */


  Wait = (function(_super) {

    __extends(Wait, _super);

    /*
    	Constructor
    */


    function Wait(time) {
      if (time == null) {
        time = 1;
      }
      this._completeHandler = __bind(this._completeHandler, this);

      Wait.__super__.constructor.call(this);
      this._time = time;
      this._timeoutId = -1;
    }

    /*
    	Method
    */


    Wait.prototype._cancel = function() {
      if (this._timeoutId !== -1) {
        clearTimeout(this._timeoutId);
      }
      return this._timeoutId = -1;
    };

    Wait.prototype._completeHandler = function(event) {
      return this.notifyComplete();
    };

    /*
    	Getter / Setter
    */


    Wait.prototype.getTime = function() {
      return this._time;
    };

    Wait.prototype.setTime = function(time) {
      this._time = time;
      return this;
    };

    /*
    	Protected
    */


    Wait.prototype._executeFunction = function(command) {
      return this._timeoutId = setTimeout(this._completeHandler, this._time * 1000);
    };

    Wait.prototype._interruptFunction = function(command) {
      return this._cancel();
    };

    Wait.prototype._destroyFunction = function(command) {
      return this._cancel();
    };

    return Wait;

  })(Command);

  Namespace('jpp.command').register('Wait', Wait);

  /*
  Listen Command
  */


  Listen = (function(_super) {

    __extends(Listen, _super);

    /*
    	Constructor
    */


    function Listen(type, dispatcher) {
      if (type == null) {
        type = null;
      }
      if (dispatcher == null) {
        dispatcher = null;
      }
      this._handler = __bind(this._handler, this);

      Listen.__super__.constructor.call(this);
      this._type = type;
      this._dispatcher = dispatcher;
    }

    /*
    	Method
    */


    Listen.prototype._handler = function(event) {
      return this.notifyComplete();
    };

    /*
    	Getter / Setter
    */


    Listen.prototype.getType = function() {
      return this._type;
    };

    Listen.prototype.setType = function(type) {
      this._type = type;
      return this;
    };

    Listen.prototype.getDispatcher = function() {
      return this._dispatcher;
    };

    Listen.prototype.setDispatcher = function(dispatcher) {
      this._dispatcher = dispatcher;
      return this;
    };

    /*
    	Protected
    */


    Listen.prototype._executeFunction = function(command) {
      var _ref;
      if (this._type != null) {
        return (_ref = this._dispatcher) != null ? _ref.addEventListener(this._type, this._handler) : void 0;
      }
    };

    Listen.prototype._interruptFunction = function(command) {
      var _ref;
      if (this._type != null) {
        return (_ref = this._dispatcher) != null ? _ref.removeEventListener(this._type, this._handler) : void 0;
      }
    };

    Listen.prototype._destroyFunction = function(command) {
      var _ref;
      if (this._type != null) {
        if ((_ref = this._dispatcher) != null) {
          _ref.removeEventListener(this._type, this._handler);
        }
      }
      this._type = null;
      return this._dispatcher = null;
    };

    return Listen;

  })(Command);

  Namespace('jpp.command').register('Listen', Listen);

  /*
  jQuery.ajax Command
  */


  JqueryAjax = (function(_super) {

    __extends(JqueryAjax, _super);

    /*
    	Constructor
    */


    function JqueryAjax(options) {
      if (options == null) {
        options = null;
      }
      this._completeHandler = __bind(this._completeHandler, this);

      JqueryAjax.__super__.constructor.call(this);
      this._options = options != null ? options : {};
      this._status = '';
      this._isSucceed = false;
    }

    /*
    	Method
    */


    JqueryAjax.prototype._completeHandler = function(XMLHttpRequest, status) {
      var _base;
      console.log(this);
      this._status = status;
      this._isSucceed = status === 'success';
      if (typeof (_base = this._options).complete === "function") {
        _base.complete(XMLHttpRequest, status);
      }
      if (this.getState() === CommandState.EXECUTING) {
        return this.notifyComplete();
      }
    };

    /*
    	Getter / Setter
    */


    JqueryAjax.prototype.getOptions = function() {
      return this._options;
    };

    JqueryAjax.prototype.setOptions = function(options) {
      this._options = options;
      return this;
    };

    JqueryAjax.prototype.getUrl = function() {
      return this._options.url;
    };

    JqueryAjax.prototype.setUrl = function(url) {
      this._options.url = url;
      return this;
    };

    JqueryAjax.prototype.getMethod = function() {
      return this._options.type;
    };

    JqueryAjax.prototype.setMethod = function(method) {
      this._options.type = method;
      return this;
    };

    JqueryAjax.prototype.getData = function() {
      return this._options.data;
    };

    JqueryAjax.prototype.setData = function(data) {
      this._options.data = data;
      return this;
    };

    JqueryAjax.prototype.getDataType = function() {
      return this._options.dataType;
    };

    JqueryAjax.prototype.setDataType = function(dataType) {
      this._options.dataType = dataType;
      return this;
    };

    JqueryAjax.prototype.getOnSuccess = function() {
      return this._options.success;
    };

    JqueryAjax.prototype.setOnSuccess = function(callback) {
      this._options.success = callback;
      return this;
    };

    JqueryAjax.prototype.getOnError = function() {
      return this._options.error;
    };

    JqueryAjax.prototype.setOnError = function(callback) {
      this._options.error = callback;
      return this;
    };

    JqueryAjax.prototype.getOnComplete = function() {
      return this._options.complete;
    };

    JqueryAjax.prototype.setOnComplete = function(callback) {
      this._options.complete = callback;
      return this;
    };

    JqueryAjax.prototype.getStatus = function() {
      return this._status;
    };

    JqueryAjax.prototype.getIsSucceed = function() {
      return this._isSucceed;
    };

    /*
    	Protected
    */


    JqueryAjax.prototype._executeFunction = function(command) {
      var key, p, value, _ref;
      p = {};
      _ref = this._options;
      for (key in _ref) {
        value = _ref[key];
        p[key] = value;
      }
      p.complete = this._completeHandler;
      return jQuery.ajax(p);
    };

    JqueryAjax.prototype._interruptFunction = function(command) {
      return this;
    };

    JqueryAjax.prototype._destroyFunction = function(command) {
      this._options = null;
      this._status = '';
      return this._isSucceed = false;
    };

    return JqueryAjax;

  })(Command);

  Namespace('jpp.command').register('JqueryAjax', JqueryAjax);

  /*
  jQuery.get Command
  */


  JqueryGet = (function(_super) {

    __extends(JqueryGet, _super);

    /*
    	Constructor
    */


    function JqueryGet(url, data, onSuccess, onError, dataType) {
      if (url == null) {
        url = null;
      }
      if (data == null) {
        data = null;
      }
      if (onSuccess == null) {
        onSuccess = null;
      }
      if (onError == null) {
        onError = null;
      }
      if (dataType == null) {
        dataType = null;
      }
      JqueryGet.__super__.constructor.call(this, {
        type: 'get',
        url: url,
        data: data,
        success: onSuccess,
        error: onError,
        dataType: dataType
      });
    }

    /*
    	Method
    */


    /*
    	Getter / Setter
    */


    /*
    	Protected
    */


    return JqueryGet;

  })(JqueryAjax);

  Namespace('jpp.command').register('JqueryGet', JqueryGet);

  /*
  jQuery.post Command
  */


  JqueryPost = (function(_super) {

    __extends(JqueryPost, _super);

    /*
    	Constructor
    */


    function JqueryPost(url, data, onSuccess, onError, dataType) {
      if (url == null) {
        url = null;
      }
      if (data == null) {
        data = null;
      }
      if (onSuccess == null) {
        onSuccess = null;
      }
      if (onError == null) {
        onError = null;
      }
      if (dataType == null) {
        dataType = null;
      }
      JqueryPost.__super__.constructor.call(this, {
        type: 'post',
        url: url,
        data: data,
        success: onSuccess,
        error: onError,
        dataType: dataType
      });
    }

    /*
    	Method
    */


    /*
    	Getter / Setter
    */


    /*
    	Protected
    */


    return JqueryPost;

  })(JqueryAjax);

  Namespace('jpp.command').register('JqueryPost', JqueryPost);

}).call(this);
